;; -*- lexical-binding: t -*-
(unless noninteractive
  (setq site-run-file nil)
  (menu-bar-mode -1)
  (line-number-mode -1)
  (tooltip-mode -1)
  (setq widget-image-enable nil)
  (setq load-prefer-newer t)
  (let ((fg-color "#dcdccc")
        (bg-color "#3f3f3f")
        (background-mode 'dark))
    (when (eq background-mode 'light)
      (setq fg-color bg-color
            bg-color fg-color))
    (setq default-frame-alist `((foreground-color . ,fg-color)
                                (background-color . ,bg-color)
                                (menu-bar-lines . 0)
                                (tool-bar-lines . 0)
                                (vertical-scroll-bars . nil)
                                (alpha            . (100 95))
                                (font             . "IBM Plex Mono Medium-10:antialias=true:hinting=true")
                                (left-fringe      . 0)
                                (right-fringe     . 0)
                                (ns-transparent-titlebar . t)
                                (internal-border-width . 8)
                                (wait-for-wm      . nil)))
    (when t
      (custom-set-variables
       `(frame-background-mode ',background-mode))
      (custom-set-faces
       `(mode-line          ((t :foreground ,bg-color :background ,fg-color :box nil)))
       '(mode-line-inactive ((t :inherit mode-line)))
       '(vertical-border    ((t :foreground "grey30" :background "grey30" :box nil)))
       '(header-line                 ((t :inherit mode-line)))
       '(line-number-current-line    ((t :inherit hl-line)))
       `(region                      ((t :background ,(if (eq background-mode 'dark)
                                                          "#6f6f6f"
                                                        "lightblue3"))))
       `(hl-line                     ((t :background ,(if (eq background-mode 'dark)
                                                          "#4f4f4f"
                                                        "lightblue2"))))
       '(diff-added                  ((t :foreground "green"  :background "gray10")))
       '(diff-removed                ((t :foreground "yellow" :background "gray10")))
       '(ediff-current-diff-A        ((t :background "gray20" :inherit diff-added)))
       '(ediff-current-diff-B        ((t :background "gray20" :inherit diff-added)))
       '(ediff-current-diff-C        ((t :background "gray20" :inherit diff-added)))
       '(ediff-current-diff-Ancestor ((t :background "gray20" :inherit diff-added)))
       '(ediff-fine-diff-A           ((t :background "gray30" :inherit diff-added)))
       '(ediff-fine-diff-B           ((t :background "gray30" :inherit diff-added)))
       '(ediff-fine-diff-C           ((t :background "gray30" :inherit diff-added)))
       '(ediff-fine-diff-Ancestor    ((t :background "gray30" :inherit diff-added)))
       '(ediff-even-diff-A           ((t :background "gray10")))
       '(ediff-even-diff-B           ((t :background "gray10")))
       '(ediff-even-diff-C           ((t :background "gray10")))
       '(ediff-even-diff-Ancestor    ((t :background "gray10")))
       '(ediff-odd-diff-A            ((t :background "gray15")))
       '(ediff-odd-diff-B            ((t :background "gray15")))
       '(ediff-odd-diff-C            ((t :background "gray15")))
       '(ediff-odd-diff-Ancestor     ((t :background "gray15")))
       '(diff-refine-added           ((t :background "gray30" :bold t :inherit diff-added)))
       '(diff-refine-change          ((t :background "gray30" :bold t :inherit diff-changed)))
       '(diff-refine-removed         ((t :background "gray30" :bold t :inherit diff-removed)))
       '(ivy-current-match           ((t :inherit secondary-selection)))
       '(helm-ff-prefix                   ((t :inherit dired-header)))
       '(helm-ff-executable               ((t :inherit dired-perm-write)))
       '(helm-ff-suid                     ((t :inherit dired-set-id)))
       '(helm-ff-directory                ((t :inherit dired-directory)))
       '(helm-ff-dotted-directory         ((t :inherit helm-ff-directory)))
       '(helm-ff-dotted-symlink-directory ((t :inherit helm-ff-symlink)))
       '(helm-ff-symlink                  ((t :inherit dired-symlink)))
       '(helm-ff-invalid-symlink          ((t :inherit error)))
       '(helm-ff-denied                   ((t :inherit error)))
       '(helm-ff-file                     ((t :inherit default)))
       '(helm-ff-truename                 ((t :inherit dired-flagged)))
       '(helm-ff-dirs                     ((t :inherit dired-directory)))
       '(helm-ff-socket                   ((t :inherit dired-special)))
       '(helm-ff-pipe                     ((t :inherit dired-special)))
       '(helm-ff-file-extension           ((t :inherit font-lock-type-face)))
       '(helm-ff-backup-file              ((t :inherit dired-ignored)))))))
